(define-rule arith-plus-zero ((t Int :list) (s Int :list)) (+ t 0 s) (+ t s))

(define-rule arith-mul-one ((t Int :list) (s Int :list)) (* t 1 s) (* t s))
(define-rule arith-mul-zero ((t Int :list) (s Int :list)) (* t 0 s) 0)

;(define-rule arith-div-one ((t Int)) (/ t 1) t)

(define-rule arith-int-div-one ((t Int)) (div t 1) t)

(define-rule arith-neg-neg-one ((t Int)) (* (- 1) (* (- 1) t)) t)

; Eliminations
(define-rule arith-elim-uminus ((t Int)) (- t) (* (- 1) t))
(define-rule arith-elim-minus ((t Int) (s Int)) (- t s) (+ t (* (- 1) s)))
(define-rule arith-elim-gt ((t Int) (s Int)) (> t s) (not (<= t s)))
(define-rule arith-elim-lt ((t Int) (s Int)) (< t s) (not (>= t s)))
(define-rule arith-elim-leq ((t Int) (s Int)) (<= t s) (>= s t))

(define-rule arith-leq-norm ((t Int) (s Int)) (<= t s) (not (>= t (+ s 1))))

(define-rule arith-geq-tighten ((t Int) (s Int)) (not (>= t s)) (>= s (+ t 1)))

(define-rule arith-geq-norm ((t Int) (s Int)) (>= t s) (>= (- t s) 0))

(define-rule arith-refl-leq ((t Int)) (<= t t) true)
(define-rule arith-refl-lt ((t Int)) (< t t) false)
(define-rule arith-refl-geq ((t Int)) (>= t t) true)
(define-rule arith-refl-gt ((t Int)) (> t t) false)

;(define-cond-rule arith-geq-contra ((t Int) (s Int)) (not (>= (- t s) 0)) (>= t s) false)
;(define-cond-rule arith-eq-contra ((t Int) (s Int)) (not (= (- t s) 0)) (= t s) false)

(define-rule* arith-plus-flatten ((xs Int :list) (w Int) (ys Int :list) (zs Int :list)) (+ xs (+ w ys) zs) (+ xs w ys zs))

(define-rule* arith-mult-flatten ((xs Int :list) (w Int) (ys Int :list) (zs Int :list)) (* xs (* w ys) zs) (* xs w ys zs))

(define-rule* arith-mult-dist ((x Int) (y Int) (z Int) (w Int :list)) (* x (+ y z w)) (+ (* x y) (* x (+ z w))))

(define-rule* arith-plus-cancel1 ((t Int :list) (x Int) (s Int :list) (r Int :list)) (+ t x s (* (- 1) x) r) (+ t s r))
(define-rule* arith-plus-cancel2 ((t Int :list) (x Int) (s Int :list) (r Int :list)) (+ t (* (- 1) x) s x r) (+ t s r))
