(define-rule arith-int-div-one ((t Int)) (div t 1) t)

(define-rule arith-neg-neg-one ((t Int)) (* (- 1) (* (- 1) t)) t)

; Eliminations
(define-rule arith-elim-uminus ((t Int)) (- t) (* (- 1) t))
(define-rule arith-elim-minus ((t Int) (s Int)) (- t s) (+ t (* (- 1) s)))
(define-rule arith-elim-gt ((t Int) (s Int)) (> t s) (not (<= t s)))
(define-rule arith-elim-lt ((t Int) (s Int)) (< t s) (not (>= t s)))
(define-rule arith-elim-leq ((t Int) (s Int)) (<= t s) (>= s t))

(define-rule arith-leq-norm ((t Int) (s Int)) (<= t s) (not (>= t (+ s 1))))

(define-rule arith-geq-tighten ((t Int) (s Int)) (not (>= t s)) (>= s (+ t 1)))

(define-rule arith-geq-norm ((t Int) (s Int)) (>= t s) (>= (- t s) 0))

(define-rule arith-refl-leq ((t Int)) (<= t t) true)
(define-rule arith-refl-lt ((t Int)) (< t t) false)
(define-rule arith-refl-geq ((t Int)) (>= t t) true)
(define-rule arith-refl-gt ((t Int)) (> t t) false)
