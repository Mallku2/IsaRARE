;edge case test
(define-rule no-args () true true)

;boolean
(define-rule bool-double-not-elim ((t Bool)) (not (not t)) t)
(define-rule* bool-and-flatten ((xs Bool :list) (b Bool) (ys Bool :list) (zs Bool :list)) (and xs (and b ys) zs) (and xs b ys zs))
(define-rule ite-then-false ((c Bool) (x Bool)) (ite c false x) (and (not c) x))

;arithmetic
(define-rule arith-geq-tighten ((t Int) (s Int)) (not (>= t s)) (>= s (+ t 1)))
(define-rule arith-elim-uminus ((t Int)) (- t) (* (- 1) t))
(define-rule* arith-plus-cancel1 ((t Int :list) (x Int) (s Int :list) (r Int :list)) (+ t x s (* (- 1) x) r) (+ t s r))

;euf
(define-rule ite-then-lookahead ((c Bool) (x ?) (y ?) (z ?)) (ite c (ite c x y) z) (ite c x z))
(define-rule eq-refl ((t ?)) (= t t) true)

;sets
(define-rule sets-inter-member ((x ?) (y ?Set) (z ?Set)) (set.member x (set.inter y z)) (and (set.member x y) (set.member x z)))
(define-rule sets-member-singleton ((x ?) (y ?)) (set.member x (set.singleton y)) (= x y))

;array
(define-cond-rule array-read-over-write2 ((t ?Array) (i ?) (j ?) (e ?)) (not (= i j)) (select (store t i e) j) (select t j))
