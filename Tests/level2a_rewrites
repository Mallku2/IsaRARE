;no lists
;simple approximate types

;uf
(define-rule eq-refl ((t ?)) (= t t) true)
(define-rule eq-symm ((t ?) (s ?)) (= t s) (= s t))
(define-rule distinct-binary-elim ((t ?) (s ?)) (distinct t s) (not (= t s)))

;arith
(define-rule arith-neg-neg-one ((t ?)) (* (- 1) (* (- 1) t)) t)
(define-rule arith-elim-uminus ((t ?)) (- t) (* (- 1) t))
(define-rule arith-elim-minus ((t ?) (s ?)) (- t s) (+ t (* (- 1) s)))
(define-rule arith-elim-gt ((t ?) (s ?)) (> t s) (not (<= t s)))
(define-rule arith-elim-lt ((t ?) (s ?)) (< t s) (not (>= t s)))
(define-rule arith-elim-leq ((t ?) (s ?)) (<= t s) (>= s t))
(define-rule arith-geq-norm ((t ?) (s ?)) (>= t s) (>= (- t s) 0))
(define-rule arith-refl-leq ((t ?)) (<= t t) true)
(define-rule arith-refl-lt ((t ?)) (< t t) false)
(define-rule arith-refl-geq ((t ?)) (>= t t) true)
(define-rule arith-refl-gt ((t ?)) (> t t) false)

;builtin
(define-rule ite-true-cond ((x ?) (y ?)) (ite true x y) x)
(define-rule ite-false-cond ((x ?) (y ?)) (ite false x y) y)
(define-rule ite-not-cond ((c Bool) (x ?) (y ?)) (ite (not c) x y) (ite c y x))
(define-rule ite-eq-branch ((c Bool) (x ?)) (ite c x x) x)
(define-rule ite-then-lookahead ((c Bool) (x ?) (y ?) (z ?)) (ite c (ite c x y) z) (ite c x z))
(define-rule ite-else-lookahead ((c Bool) (x ?) (y ?) (z ?)) (ite c x (ite c y z)) (ite c x z))
(define-rule ite-then-neg-lookahead ((c Bool) (x ?) (y ?) (z ?)) (ite c (ite (not c) x y) z) (ite c y z))
(define-rule ite-else-neg-lookahead ((c Bool) (x ?) (y ?) (z ?)) (ite c x (ite (not c) y z)) (ite c x y))

;string
(define-cond-rule str-len-replace-inv ((t ?) (s ?) (r ?)) 
  (= (str.len s) (str.len r))
  (str.len (str.replace t s r))
  (str.len t))
(define-rule str-len-update-inv ((t ?) (n Int) (r ?)) 
  (str.len (str.update t n r))
  (str.len t))
(define-cond-rule str-len-substr-in-range ((s ?) (n Int) (m Int))
  (and (>= n 0) (>= m 0) (>= (str.len s) (+ n m)))
  (str.len (str.substr s n m))
  m)
(define-cond-rule str-len-substr-ub1 ((s ?) (n Int) (m Int) (k Int))
  (and (>= k 0) (>= k m))
  (>= k (str.len (str.substr s n m)))
  true)
(define-cond-rule str-len-substr-ub2 ((s ?) (n Int) (m Int) (k Int))
  (and (>= k 0) (>= k (- (str.len s) n)))
  (>= k (str.len (str.substr s n m)))
  true)
(define-rule str-prefixof-elim ((s ?) (t ?))
  (str.prefixof s t)
  (= s (str.substr t 0 (str.len s))))
(define-rule str-suffixof-elim ((s ?) (t ?))
  (str.suffixof s t)
  (= s (str.substr t (- (str.len t) (str.len s)) (str.len s))))
(define-cond-rule str-prefixof-one ((s ?) (t ?))
  (= (str.len t) 1)
  (str.prefixof s t)
  (str.contains t s))
(define-cond-rule str-suffixof-one ((s ?) (t ?))
  (= (str.len t) 1)
  (str.suffixof s t)
  (str.contains t s))
(define-cond-rule str-substr-full ((s ?) (n Int))
  (>= n (str.len s))
  (str.substr s 0 n)
  s)
(define-rule str-contains-refl ((x ?)) (str.contains x x) true)
(define-rule str-at-elim ((x ?) (n Int)) (str.at x n) (str.substr x n 1))

